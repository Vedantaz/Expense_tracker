     {/* {Object.keys(groupedExpenses).map((groupDate) => (
        <Box key={groupDate} sx={{ marginBottom: 2 }}>
          <Typography variant="h6" sx={{ marginBottom: 1 }}>
            {format(new Date(groupDate), 'dd MMM, yyyy')}
          </Typography>
          <List>
            {groupedExpenses[groupDate].map((expense) => (
              <ListItem key={expense.originalIndex} sx={{ display: 'flex', justifyContent: 'space-between' }}>
                <ListItemText
                  primary={expense.name}
                  secondary={`₹${expense.amount} (Last updated: ${format(new Date(expense.date), 'dd MMM, yyyy')})`}
                />
                <Stack direction="row" spacing={1}>
                  <IconButton onClick={() => handleEditExpense(expense.originalIndex)} color="primary">
                    <EditIcon />
                  </IconButton>
                  <IconButton onClick={() => handleRemoveExpense(expense.originalIndex)} color="error">
                    <DeleteIcon />
                  </IconButton>
                </Stack>
              </ListItem>
            ))}
          </List>
        </Box>
      ))}

      {editIndex !== null && (
        <Box sx={{ marginBottom: 2 }}>
          <TextField
            label="Edit Expense Name"
            value={editExpenseName}
            onChange={(e) => setEditExpenseName(e.target.value)}
            fullWidth
            sx={{ marginBottom: 1 }}
          />
          <TextField
            label="Edit Amount"
            type="number"
            value={editAmount}
            onChange={(e) => setEditAmount(e.target.value)}
            fullWidth
            sx={{ marginBottom: 1 }}
          />
          <TextField
            label="Edit Date"
            type="date"
            value={format(date, 'yyyy-MM-dd')}
            onChange={(e) => setDate(new Date(e.target.value))}
            fullWidth
            sx={{ marginBottom: 1 }}
          />
          <Button
            variant="contained"
            color="secondary"
            onClick={handleUpdateExpense}
          >
            Update Expense
          </Button>
        </Box>
      )} */}







      import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addExpense, removeExpense, updateExpense } from '../../../store/features/expenseSlice';
import Search from '../search'
import { TextField, Button, Box, List, ListItem, ListItemText, IconButton, Stack, Typography, FormControl, FormControlLabel, RadioGroup, Radio } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import { format } from 'date-fns';

const Expenses = () => {

  const dispatch = useDispatch();
  const expenses = useSelector((state) => state.expenses.expenses);
  const total = useSelector((state) => state.expenses.total);

  const [expenseName, setExpenseName] = useState('');
  const [amount, setAmount] = useState('');
  const [date, setDate] = useState(new Date());
  const [editIndex, setEditIndex] = useState(null);
  const [editExpenseName, setEditExpenseName] = useState('');
  const [editAmount, setEditAmount] = useState('');
  const [category, setCategory] = useState('');
  const [amountMin, setAmountMin] = useState('');
  const [amountMax, setAmountMax] = useState('');

  const handleAddExpense = () => {

    if ( !expenseName || !amount || !amountMax || !category ) {
      alert('Please fill all fields including Max Amount!');
      return;
    }
    
    const ratio = (parseFloat(amount) / parseFloat(amountMax)) * 100;
    const currentDate = new Date().toISOString();

    if (parseFloat(amountMax) === 0) {
      alert('Max Amount cannot be zero!');
      return;
    }

    dispatch(addExpense({ name: expenseName, amount: parseFloat(amount), date: currentDate, category, ratio }));
    setExpenseName('');
    setAmount('');
    setAmountMax('');
    setCategory('');

  };

  const handleRemoveExpense = (index) => {
    dispatch(removeExpense(index));

  };

  const handleEditExpense = (index) => {
    setEditIndex(index);
    setEditExpenseName(expenses[index].name);
    setEditAmount(expenses[index].amount.toString());
    setDate(new Date(expenses[index].date));
    setCategory(expenses[index].category);

  };

  const handleUpdateExpense = () => {
    if (editExpenseName && editAmount && category) {
      const updatedExpense = {
        name: editExpenseName,
        amount: parseFloat(editAmount),
        date: date.toISOString(),
        category,
        ratio : (parseFloat(editAmount)/ parseFloat(amountMax)) * 100,
      };

      dispatch(updateExpense({ index: editIndex, updatedExpense }));
      setEditIndex(null);
      setEditExpenseName('');
      setEditAmount('');
      setDate(new Date());
      setCategory('');
      setAmountMax('');
    }
  };

  // grouping date wise expenses
  const groupExpenses = (expenses) => {
    return expenses.reduce((acc, expense, originalIndex) => {
      const formattedDate = format(new Date(expense.date), 'dd MMM, yyyy');
      if (!acc[formattedDate]) {
        acc[formattedDate] = [];
      }
      acc[formattedDate].push({ 
        ...expense, 
        originalIndex, 
        amountMax :expense.amountMax, 
        ratio: expense.amountMax ? (expense.amount / expense.amountMax) * 100 : 0 
      });       // this is done to task reference to original Index of expenses array
      return acc;
    }, {});
  }

  const groupedExpenses = groupExpenses(expenses);

  const filterExpenses = expenses.filter(expense => {
    const withinAmount = ((!amountMin || expense.amount >= amountMin) && (!amountMax || expense.amount <= amountMax));
    const matchCategory = !category || expense.category === category;
    return withinAmount && matchCategory;
  })

  return (
    <Box sx={{ padding: 2 }}>
      <Typography variant="h4" gutterBottom>
        Daily Expenses (Kharcha)
      </Typography>
      <Search />
      <TextField
        label={`Expense Name`}
        value={expenseName}
        onChange={(e) => setExpenseName(e.target.value)}
        fullWidth
        sx={{ marginBottom: 1 }}
      />
      <TextField
        label={`Amount`}
        type="number"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        fullWidth
        sx={{ marginBottom: 1 }}
      />

      {/*  Category filter */}
      <FormControl component="fieldset" fullWidth sx={{ marginBottom: 1 }}>
        <RadioGroup
          value={category}
          onChange={(e) => setCategory(e.target.value)}
          row>
          <FormControlLabel value="Food" control={<Radio />} label="Food" />
          <FormControlLabel value="Travel" control={<Radio />} label="Travel" />
          <FormControlLabel value="Casual" control={<Radio />} label="Casual" />
          <FormControlLabel value="Medicine" control={<Radio />} label="Medicine" />
        </RadioGroup>
      </FormControl>

      {/* Amount range filter */}

      <Stack direction="row" spacing={2} sx={{ marginBottom: 2 }}>

        <TextField
          label="Min amount" type="number" value={amountMin} onChange={(e) => { setAmountMin(e.target.value) }} />

        <TextField
          label="Max amount" type="number" value={amountMax} onChange={(e) => { setAmountMax(e.target.value) }} />
      </Stack>

      <Button
        variant="contained"
        color="primary"
        onClick={handleAddExpense}
        sx={{ marginBottom: 2 }}
      >
        Add Expense
      </Button>

      {/* existing code  */}
      {Object.keys(groupedExpenses).map((groupDate) => (
        <Box key={groupDate} sx={{ marginBottom: 2 }}>
          <Typography variant="h6" sx={{ marginBottom: 1 }}>
            {format(new Date(groupDate), 'dd MMM, yyyy')}
          </Typography>
          <List>

            {groupedExpenses[groupDate].map((expense) => (
              <React.Fragment key={expense.originalIndex}>
                {editIndex === expense.originalIndex && (
                  <Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f5f5f5', borderRadius: 1 }}>
                    <TextField
                      label="Edit Expense Name"
                      value={editExpenseName}
                      onChange={(e) => setEditExpenseName(e.target.value)}
                      fullWidth
                      sx={{ marginBottom: 1 }}
                    />
                    <TextField
                      label="Edit Amount"
                      type="number"
                      value={editAmount}
                      onChange={(e) => setEditAmount(e.target.value)}
                      fullWidth
                      sx={{ marginBottom: 1 }}
                    />
                    <TextField
                      label="Edit Date"
                      type="date"
                      value={format(date, 'yyyy-MM-dd')}
                      onChange={(e) => setDate(new Date(e.target.value))}
                      fullWidth
                      sx={{ marginBottom: 1 }}
                    />
                    <Button
                      variant="contained"
                      color="secondary"
                      onClick={handleUpdateExpense}>
                      Update Expense
                    </Button>
                  </Box>
                )}
                <ListItem sx={{ display: 'flex', justifyContent: 'space-between' }}>
                  <ListItemText
                    primary={expense.category}
                    secondary={`${expense.ratio}%`}
                  />
                  <ListItemText
                    primary={expense.name}
                    secondary={
                      <>
                        ₹{expense.amount}
                        <br />
                        (Last updated: {format(new Date(expense.date), 'dd MMM, yyyy')})
                      </>
                    }

                  />
                  <Stack direction="row" spacing={1}>
                    <IconButton onClick={() => handleEditExpense(expense.originalIndex)} color="primary">
                      <EditIcon />
                    </IconButton>
                    <IconButton onClick={() => handleRemoveExpense(expense.originalIndex)} color="error">
                      <DeleteIcon />
                    </IconButton>
                  </Stack>
                </ListItem>
              </React.Fragment>
            ))}
          </List>
        </Box>
      ))}

<Typography variant="h6" sx={{ marginTop: 2 }}>
  Total Expenses: 
  <Box
    component="span"
    sx={{
      backgroundColor: 'blue',
      color: 'white',
      fontWeight: 'bold',
      padding: '4px 8px',
      borderRadius: '4px',
      display: 'inline-block',
      marginLeft: 1,
      fontSize: '1.25rem',
      letterSpacing: '0.5px',
      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.15)',
    }} >
    ₹{total}
  </Box>
</Typography>
    </Box>
  );
};

export default Expenses;



//expenses main logic 

  {Object.keys(groupedExpenses).map((groupDate) => (
        <Box key={groupDate} sx={{ marginBottom: 2 }}>
          <Typography variant="h6" sx={{ marginBottom: 1 }}>
            {format(new Date(groupDate), 'dd MMM, yyyy')}
          </Typography>
          <List>

            {groupedExpenses[groupDate].map((expense) => (
              <React.Fragment key={expense.originalIndex}>
                {editIndex === expense.originalIndex && (
                  <Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f5f5f5', borderRadius: 1 }}>
                    <TextField
                      label="Edit Expense Name"
                      value={editExpenseName}
                      onChange={(e) => setEditExpenseName(e.target.value)}
                      fullWidth
                      sx={{ marginBottom: 1 }}
                    />
                    <TextField
                      label="Edit Amount"
                      type="number"
                      value={editAmount}
                      onChange={(e) => setEditAmount(e.target.value)}
                      fullWidth
                      sx={{ marginBottom: 1 }}
                    />
                    <TextField
                      label="Edit Date"
                      type="date"
                      value={format(date, 'yyyy-MM-dd')}
                      onChange={(e) => setDate(new Date(e.target.value))}
                      fullWidth
                      sx={{ marginBottom: 1 }}
                    />
                    <Button
                      variant="contained"
                      color="secondary"
                      onClick={handleUpdateExpense}>
                      Update Expense
                    </Button>
                  </Box>
                )}

                <ListItem sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: 2, borderBottom: '1px solid #ddd' }}>
                  {/* Category Column */}
                  <Box sx={{ flex: 1, display: 'flex', alignItems: 'left', flexDirection: 'column' }}>
                    <Typography variant="body1" sx={{ fontWeight: 'bold', marginRight: 2 }}>
                      {expense.category}
                    </Typography>
                    <Typography variant="body2" sx={{ color: 'gray' }}>
                      (Last updated : {format(new Date(expense.date), 'dd MMM, yyyy')})
                    </Typography>
                  </Box>

                  <Box sx={{ flex: 1, display: 'flex', alignItems: 'left', flexDirection: 'column' }}>
                    <Typography variant="body1" sx={{ fontWeight: 'bold', marginRight: 2 }}>
                      {expense.name}
                    </Typography>
                    <Typography variant="body2" sx={{ color: 'gray' }}>
                    ₹{expense.amount}
                    </Typography>
                  </Box>

                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <IconButton onClick={() => handleEditExpense(expense.originalIndex)} color="primary">
                      <EditIcon />
                    </IconButton>
                    <IconButton onClick={() => handleRemoveExpense(expense.originalIndex)} color="error">
                      <DeleteIcon />
                    </IconButton>
                  </Box>


                </ListItem>
              </React.Fragment>
            ))}
          </List>
        </Box>
      ))}





      /// 

     
      {Object.keys(groupedExpenses).map((groupDate) => (
        <Box key={groupDate} sx={{ marginBottom: 2 }}>
          <Typography variant="h6" sx={{
            marginBottom: 1,
            backgroundColor: '#f44336',
            width: '100%',
            padding: '8px',
            boxSizing: 'border-box', borderRadius: '8px', color: 'white', textAlign: 'center'
          }}>
            {format(new Date(groupDate), 'dd MMM, yyyy')}
          </Typography>

          {/* Iterate over categories within each date group */}
          {Object.keys(groupedExpenses[groupDate]).map((category) => (
            <Box key={category} sx={{ marginBottom: 2 }}>
              <Typography variant="body1" sx={{
                fontWeight: 'bold', marginBottom: 1,
                marginRight: 2,
                backgroundColor: 'white',
                color: 'black',
                width: '100%',
                padding: '8px',
                borderRadius: '8px',
                boxSizing: 'border-box',
                textAlign: 'center',
                boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',
              }}>
                {category}
              </Typography>

              {/* Iterate over names within each category */}

              {Object.keys(groupedExpenses[groupDate][category]).map((name) => (
                <Box key={name} sx={{ marginBottom: 2 }}>

                  <Typography variant="body1" sx={{ fontWeight: 'bold', marginBottom: 1 }}>
                    {name}
                  </Typography>

                  <List>
                {/* Map through the array of expenses for each name */}
                {groupedExpenses[groupDate][category][name].map((expense) => (
                  <ListItem
                    key={expense.originalIndex}
                    sx={{
                      display: 'flex',  
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      padding: 2,
                      margin: 1,
                      border: '2px solid #ddd', borderRadius: '8px'
                    }}
                  >
                    {/* Category Column */}
                    <Box sx={{ flex: 1, display: 'flex', alignItems: 'left', flexDirection: 'column' }}>
                      <Typography variant="body1" sx={{ fontWeight: 'bold', marginRight: 2 }}>
                        {expense.category}
                      </Typography>
                      <Typography variant="body2" sx={{ color: 'gray' }}>
                        (Last updated : {format(new Date(expense.date), 'dd MMM, yyyy')})
                      </Typography>
                    </Box>

                    {/* Value Column */}
                    <Box sx={{ flex: 1, display: 'flex', alignItems: 'left', flexDirection: 'column' }}>
                      <Typography variant="body1" sx={{ fontWeight: 'bold', marginRight: 2 }}>
                        {expense.name}
                      </Typography>
                      <Typography variant="body2" sx={{ color: 'gray' }}>
                        ₹{expense.amount}
                      </Typography>
                    </Box>  

                    {/* Action Buttons Column */}
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <IconButton onClick={() => handleEditExpense(expense.originalIndex)} color="primary">
                        <EditIcon />
                      </IconButton>
                      <IconButton onClick={() => handleRemoveExpense(expense.originalIndex)} color="error">
                        <DeleteIcon />
                      </IconButton>
                    </Box>
                  </ListItem>
                ))}
              </List>
                </Box>
              ))}
            </Box>
          ))}
        </Box>
      ))}


      ////  17th dec

         {Object.keys(groupedExpenses).map((groupDate) => (

        <Box key={groupDate} sx={{ marginBottom: 2 }}>
          <Typography variant="h6" sx={{
              marginBottom: 1,
              backgroundColor: '#f44336',
            width: '100%',
            padding: '8px',
            boxSizing: 'border-box', borderRadius: '8px', color: 'white', textAlign: 'center', fontWeight: 'bold',
          }}>
            {format(new Date(groupDate), 'dd MMM, yyyy') } - Total : ${totalExpense} 
          </Typography>

          {totalExpense.map((expenseSummary) => (
            <Box key={expenseSummary.groupDate} sx={{ marginBottom: 2 }}>
              <Typography variant="h6" sx={{ marginBottom: 1 }}>
                {expenseSummary.groupDate}
              </Typography>

              <Typography variant="body1" sx={{ fontWeight: 'bold', color: 'green' }}>
                Total: ₹{expenseSummary.total}
              </Typography>
            </Box>
          ))}


          {/* Iterate over categories within each date group */}
          {Object.keys(groupedExpenses[groupDate]).map((category) => (
            <Box key={category} sx={{ marginBottom: 2 }}>
              <Typography variant="h6" sx={{
                fontWeight: 'bold',
                marginBottom: 1,
                marginRight: 2,
                backgroundColor: 'white',
                color: 'black',
                width: '100%',
                padding: '8px',
                borderRadius: '8px',
                boxSizing: 'border-box',
                textAlign: 'center',
                boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',
              }}>
                {category}
              </Typography>
              <List>
                {groupedExpenses[groupDate][category].map((expense) => (
                  <React.Fragment key={`${expense.name}-${expense.date}-${expense.category}-${expense.originalIndex}`}>
                    {editIndex === expense.originalIndex && (

                      // edit box
                      <Box sx={{ marginBottom: 2, padding: 2, backgroundColor: '#f5f5f5', borderRadius: 1 }}>
                        <TextField
                          label="Edit Expense Name"
                          value={editExpenseName}
                          onChange={(e) => setEditExpenseName(e.target.value)}
                          fullWidth
                          sx={{ marginBottom: 1 }}
                        />
                        <TextField
                          label="Edit Amount"
                          type="number"
                          value={editAmount}
                          onChange={(e) => setEditAmount(e.target.value)}
                          fullWidth
                          sx={{ marginBottom: 1 }}
                        />
                        <TextField
                          label="Edit Date"
                          type="date"
                          value={editIndex !== null ? format(date, 'yyyy-MM-dd') : format(new Date(), 'yyyy-MM-dd')}
                          onChange={(e) => setDate(new Date(e.target.value))}
                          fullWidth
                          sx={{ marginBottom: 1 }}
                        />
                        <Button variant="contained" color="secondary" onClick={handleUpdateExpense}>
                          Update Expense
                        </Button>
                      </Box>
                    )}

                    <ListItem sx={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      padding: 2,
                      margin: 1,
                      border: '2px solid #ddd',
                      borderRadius: '8px'
                    }}>
                      {/* Category Column */}
                      <Box sx={{ flex: 1, display: 'flex', alignItems: 'left', flexDirection: 'column' }}>
                        <Typography variant="body1" sx={{ fontWeight: 'bold', marginRight: 2 }}>
                          {expense.name}
                        </Typography>
                        <Typography variant="body2" sx={{ color: 'gray' }}>
                          (Last updated : {format(new Date(expense.date), 'dd MMM, yyyy')})
                        </Typography>
                      </Box>

                      {/* Value Column */}
                      <Box sx={{ flex: 1, display: 'flex', alignItems: 'center', flexDirection: 'column' }}>

                        <Typography variant="h7" sx={{ color: 'black', letterSpacing: '1px', fontWeight: 'bold', }}>
                          ₹{expense.amount}
                        </Typography>
                      </Box>

                      {/* Action Buttons Column */}
                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <IconButton onClick={() => handleEditExpense(expense.originalIndex)} color="primary">
                          <EditIcon />
                        </IconButton>
                        <IconButton onClick={() => handleRemoveExpense(expense.originalIndex)} color="error">
                          <DeleteIcon />
                        </IconButton>
                        <IconButton
                          onClick={() => handleImpToggle(expense.originalIndex)} // Handle toggle
                          color={expense.isImp ? "warning" : "default"}
                        >
                          <StarIcon />
                        </IconButton>
                      </Box>
                    </ListItem>
                  </React.Fragment>
                ))}
              </List>
            </Box>
          ))}
        </Box>
      ))}




      /// 
      imp code 


        <Typography variant="h4" gutterBottom>
        Daily Expenses (Kharcha)
      </Typography>
      <Search  sx={{marginRight: 0}}/>
      <TextField
        label="Expense Name"
        value={expenseName}
        onChange={(e) => setExpenseName(e.target.value)}
        fullWidth
        sx={{ marginBottom: 1 }}
      />
      <TextField
        label="Amount"
        type="number"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        fullWidth
        sx={{ marginBottom: 1 }}
      />

      {/*  formControl radio buttons and add btn */}
      <FormControl component="fieldset" fullWidth sx={{ marginBottom: 1,
    // display: 'flex',
    alignItems: 'center',flexDirection: 'row',justifyContent: 'space-between', 
    width: '100%', flexGrow:'1' }}>
        <RadioGroup
          value={category}
          onChange={(e) => setCategory(e.target.value)}
          row
          sx={{
            width: '100%',
            display: 'flex',
            alignItems: 'center', 
            justifyContent: 'flex-start',  
            flexGrow: 1,
          }}
        >
          <FormControlLabel value="Food" control={<Radio />} label="Food" />
          <FormControlLabel value="Travel" control={<Radio />} label="Travel" />
          <FormControlLabel value="Casual" control={<Radio />} label="Casual" />
          <FormControlLabel value="Medicine" control={<Radio />} label="Medicine" />
        </RadioGroup>

        {/* Button aligned to the right */}
        <Box sx={{ display: 'flex', justifyContent: 'center',alignItems:'center' }}>
          <Button
            variant="contained"
            color="primary"
            onClick={handleAddExpense}
            sx={{ padding: '8px 16px', fontWeight: 'bold' }}
          >
            Add 
          </Button>
        </Box>
      </FormControl>